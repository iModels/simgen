{% implements 'simulation.yaml' %}
{# generate simulation script and put it into a string variable #}
simulation_script = """
{# include a template that will generate the simulation script #}
{% include 'simulation_script.jinja' %}
"""

# resolve variables in simulation script using locals and globals
from jinja2 import Template, Environment, StrictUndefined
env = Environment(undefined=StrictUndefined, extensions=['jinja2.ext.with_'], trim_blocks=True, cache_size=0)
simulation_script_template = env.from_string(simulation_script)
# this will raise an error if there are variables in the script template (between double curly braces)
# that do not exist in te local or global scope
simulation_script = simulation_script_template.render(dict(globals(), **locals()))

# save simulation script to file
with open('{{ simulation_script_file_name }}', 'w') as f:
    f.write(simulation_script)

{# include a template that will generate the code that fires up the simulator #}
{% include 'execute_simulator.jinja' %}
